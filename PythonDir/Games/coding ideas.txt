main #runs the entire game
->coupled with everything
	+main cycle
	+management classes' initializations
	+(?) game state machine #so basically it describes the turn "playback" as well as it definds "binds"

unit management class #controls the selection, adding/removing units, etc.
-> drawing management
-> map management
	+create unit
	+destroy unit
	+move unit #stores and executes unit's movement
	+(?)draw unit #get a unit type from the unit and draws its pattern
	-movement queue #have a huge array for every unit on the map, needs to be carefully managed

drawing management class #so window drawing and unit drawin is separate? make the drawing heirarcy
-> unit management
-> (?) map management
-> (?)gui #probably just draw the gui here, but configure it in another class

input management class #keyboard, mouse management, command pattern is king
-> unit management
-> map management
-> gui
	+manages inputs from keyboard and sends them elsewhere
	+has input states

gui class #supposed to be separate from the drawing management class
-> drawing management
-> input management
-> (?) map class #it's part of GUI, selection and everything, but merging the two is a bad idea
	+ties user interface to the interactions #duh

map management class #returns the infomation about particular things being in particular places
-> (?) gui
-> unit management
-> input management
-> (?) drawing management#partially and more from a gui standpoint
	+can get you a unit
	+can find a proper limits for the unit's movement	#use a VO list and place all VOs in there
	+can place and calculate the field of view
	-Movement Obstacle array
	-Vision Obstacle array

unit class
-> drawing pattern of a specific unit
-> unit management
	-stats (health, armor, speed, damage, AC, FR, VR)
	-active buff/debuff #just a list that autoresolves in the end of the turn
	-movement queue #i will probably move it to the unit management and create one huge queue fore everyone

###

game events:	#exclusively unit interactions
	- (?)terminate	#i don't think i needed this to begin with
	- unitMove
	- unitAttack
	- unitCreate
	- unitDestroy
	- unitUseAbility
	- unitHealthCheck
	- unitAbilityCheck

input states:	#some game events are able to switch those around
	-selection movement
	-unit movement
	-unit attack

###

TODO:
	- fix field of view calculation
	- add the turn structure (Preturn, First Half, Second Half, Postturn)
	- add the team structure (and, therefore, friendly/enemy actions' conditions)
	# - fix the attack function to add the ability of undoing attack
	# - add mouse support
	- separate the files and invent an interface to handle throwing managers around the files
	?- add auto-pathing for movement
	#- look up how to do GUI
	- implement some existing units and add their abilities
	- figure out how to calculate the armor damage reduction properly 
		(prob just going to make it decreased by plain numbers)

DONE:
	= fixed the screenDrawFireRange function
	= broke the filed of view calcualtion (this time it was dimond walls)
	= added the moveResolveColision function, which determines the final position of the unit's movement