main #runs the entire game
->coupled with everything
	+main cycle
	+management classes' initializations and their interconnections

event management
-> map management
-> unit management
	+adds events such as movement, attacks, health checks, etc.
	+handles events
	+determines the action order for proper turn structure
	-event queue
	
unit management class #controls the selection, adding/removing units, etc.
-> map management
	+create unit
	+destroy unit
	+move units
	+resolve movement collisions
	-units array containing all units currently existing
	-movement queues array containing a queue for each unit
	-currently selected unit

drawing management class #so window drawing and unit drawin is separate? make the drawing heirarcy
-> unit management
-> map management
	-constants required for drawing the window and everything on it

input management class #keyboard, mouse management
-> unit management
-> map management
	+state machine for inputs
	+manages inputs from keyboard and mouse
	-input states
	-currently used input state

map management class #returns the infomation about particular things being in particular places
-> unit management
-> drawing management #partially and more from a gui standpoint
	-Vision Obstacle array
	-Movement Obstacle array
	-the entire map as an array
	-neighbours graph each node containing every single neighboring hex with the selected one

unit class
-> unit management
-> map management
	+add movement queue
	+cast ability
	-stats (health, armor, speed, damage, AC, FR, VR, abilities)
	-activated abilities #list of ability class instances that will be used during the turn
	-active buff/debuff #just a list that autoresolves in the end of the turn
	-current attack target (not all of them will have one)

###

game events:	#exclusively unit interactions
	- unitMove
	- unitAttack
	- unitCreate
	- unitDestroy
	- unitHealthCheck
	- unitAbilityCast

input states:	#some game events are able to switch those around
	-selection movement
	-unit movement
	-unit attack

GUI:
	- so the basic unit interaction gui:
		- buttons for movement and attack actions
		- buttons for ability casting
		- button for undoing all actions
		
	- add additional "lense" so it will be possible to look up other units' attack and movement ranges
	
	- add the ability to scroll the map horizontally and vertically
		- adding another reference coodinates for drawing, well, everything
		(i will brobably have the scrolling values, so it'll be easy, just add scrolling to the coordinates)
	
	- add tooltips
	
	+need a way to determine elements of GUI that are being interacted with
		+each element needs to have stored dimentions
		+checks for which element was clicked
		+ways to differentiate map interactions from GUI interactions
	
###

TODO:
	!- rewrite some classes as separate managers(interfaces) and functional classes
	#then the following line is rendered obsolete, since i will be rewriting 50% of the code regardless
	#- refactor old code, file by file (2/5 done)
	- eventUnitDestroy is not fucking working; this code is rubbish, i should just rewrite all of it
	- add avalible units and rewrite the code to use coding for units instead of their names
	- rewrite moveUnit - it's broke as hell, i was trying to be nice, but it refuses to comply
	(i've tried starting a separate thread, but somthing went wrong, i will probably revert changes to moveUnit for now)
	- rewrite FOV calculations in reference to units, also fix it
	- i have a conflict between player names and ids in getting fov by unit's owner
	(so, i should probably save calculated fov per unit in the unit's object)
	- add all calculation of movement/attack range to the unit and store the values, instead of calculating them evey frame
	- add a mechanism to track position of everything on the map, using MAP0.Map to store stuff
	(that will also allow to significantly simplify drawing stuff)
	- add casting distanse to abilities directly instead of using unit's VR stat
	- add auras classes, tied to abilities
	- optimize map drawing to draw minimal amount of lines in the hex grid (i have to think of a way to draw only one line on hex intersection)
	- rewrite abilities to be stored by their objects, not by ID
	- code in the way to store temporary stat bonuses to units (have active buff array on the unit and make all stat check to add bonuses from buffs)
	- add a function for undoing casted abilities (it will go to the ability and make isActive = False)
	# - fix colision resolver to properly resolve scenarios when 2 units with the same speed move in the same line
	- make a basic GUI for easier interactions with units
	- add a way to track mouse movement in input manager (for map mouse scrolling)
	- implement some existing units and add their abilities

DONE:
	= optimized map drawing to only draw what is currently on the screen
	= optimized hex drawing by determining their color first and then drawing all of them once
	= added a functions to undo attacks and movement queues of units directly from unit object(and removed that functionality from the Event0.eventUndo)
	= unit manager code was rewritten to be less of a crap