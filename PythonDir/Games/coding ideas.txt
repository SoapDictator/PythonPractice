main #runs the entire game
->coupled with everything
	+main cycle
	+management classes' initializations and their interconnections

event management
-> map management
-> unit management
	+adds events such as movement, attacks, health checks, etc.
	+handles events
	+determines the action order for proper turn structure
	-event queue
	
unit management class #controls the selection, adding/removing units, etc.
-> map management
	+create unit
	+destroy unit
	+move units
	+resolve movement collisions
	-units array containing all units currently existing
	-movement queues array containing a queue for each unit
	-currently selected unit

drawing management class #so window drawing and unit drawin is separate? make the drawing heirarcy
-> unit management
-> map management
	-constants required for drawing the window and everything on it

input management class #keyboard, mouse management, command pattern is king
-> unit management
-> map management
	+state machine for inputs
	+manages inputs from keyboard and mouse
	-input states
	-currently used input state

map management class #returns the infomation about particular things being in particular places
-> unit management
-> drawing management #partially and more from a gui standpoint
	-Vision Obstacle array
	-Movement Obstacle array
	-the entire map as an array
	-neighbours graph each node containing every single neighboring hex with the selected one

unit class
-> unit management
-> map management
	-stats (health, armor, speed, damage, AC, FR, VR)
	-active buff/debuff #just a list that autoresolves in the end of the turn
	-current attack target (not all of themwill have one)

###

game events:	#exclusively unit interactions
	- unitMove
	- unitAttack
	- unitCreate
	- unitDestroy
	- unitUseAbility
	- unitHealthCheck
	- unitAbilityCheck

input states:	#some game events are able to switch those around
	-selection movement
	-unit movement
	-unit attack

###

TODO:
	# - add a function that will determine the color of the hex so it won't draw hexes on top of each other 50 times over
	# - add illlustration of each unit's action (movement, attack, etc.)
	- add the action condiditons check (artillery moving will prevent it from shooting in the same turn and vice versa, for example)
	- fix the attack function to add the ability of undoing attack
	# - fix colision resolver to properly resolve scenarios when 2 units with the same speed move in the same line
	# - look up how to do vector graphics in Pygame
	#- make a basic GUI for easier interactions with units
	#- implement some existing units and add their abilities

DONE:
	= added Engineer core ability
	= fixed the... documentation(?) so i don't have to find out every time why stuff is where it is
	= added the team structure (probably needs further work to make it more coherent)
	= added the turn structure (currently completely broken, needs reworking)
	= added visibility checks for units' actions
	= added visibility checks for drawing units
	= fixed FOV calculation