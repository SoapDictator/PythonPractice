main #runs the entire game
->coupled with everything
	+main cycle
	+management classes' initializations and their interconnections

event management
-> map management
-> unit management
	+adds events such as movement, attacks, health checks, etc.
	+handles events
	+determines the action order for proper turn structure
	-event queue
	
unit management class #controls the selection, adding/removing units, etc.
-> map management
	+create unit
	+destroy unit
	+move units
	+resolve movement collisions
	-units array containing all units currently existing
	-movement queues array containing a queue for each unit
	-currently selected unit

drawing management class #so window drawing and unit drawin is separate? make the drawing heirarcy
-> unit management
-> map management
	-constants required for drawing the window and everything on it

input management class #keyboard, mouse management, command pattern is king
-> unit management
-> map management
	+state machine for inputs
	+manages inputs from keyboard and mouse
	-input states
	-currently used input state

map management class #returns the infomation about particular things being in particular places
-> unit management
-> drawing management #partially and more from a gui standpoint
	-Vision Obstacle array
	-Movement Obstacle array
	-the entire map as an array
	-neighbours graph each node containing every single neighboring hex with the selected one

unit class
-> unit management
-> map management
	+add movement queue
	+cast ability
	-stats (health, armor, speed, damage, AC, FR, VR, abilities)
	-activated abilities #list of ability class instances that will be used during the turn
	-active buff/debuff #just a list that autoresolves in the end of the turn
	-current attack target (not all of them will have one)

###

game events:	#exclusively unit interactions
	- unitMove
	- unitAttack
	- unitCreate
	- unitDestroy
	- unitHealthCheck
	- unitAbilityCast

input states:	#some game events are able to switch those around
	-selection movement
	-unit movement
	-unit attack

GUI:
	- so the basic unit interaction gui:
		- buttons for movement and attack actions
		- buttons for abilities' casting
		- button for undoing all actions
		
	- add additional "lense" so it will be possible to look up other units' attack and movement ranges
	(that requres proper illustration of said ranges, so i need to actually change how hex coloring works)
	
	- add the ability to scroll the map horizontally and vertically
		- adding another reference coodinates for drawing, well, everything
		(i will brobably have the scrolling values, so it'll be easy, just add scrolling to the coordinates)
	
	- add tooltips
	
###

TODO:
	- code in the way to store temporary stat bonuses to units (have active buff array on the unit and make all stat check to add bonuses from buffs)
	- add a function of undoing attacks and movement queue to the unit directly (and remove that functionality from the eventUndo)
	- add a fucntion for undoing casted abilities (it will go to the ability and make isActive = False)
	? - add a reference table so it will be possible to find units in SCOUTS, TANKS, etc.
	# - add a function that will determine the color of the hex so it won't draw hexes on top of each other 50 times over
	# - fix colision resolver to properly resolve scenarios when 2 units with the same speed move in the same line
	# - look up how to do vector graphics in Pygame
	- make a basic GUI for easier interactions with units
	- implement some existing units and add their abilities

DONE:
	= added ability mechanics into the game
	= replaced engineer's "attack" with a proper healing ability "EngieHeal" (now it will properly heal units)
	= added a passive ammo replenishing ability to the engineer
	= reworked eventAdd function (no longer has hard-coded instance constructor)
	= reworked unitCreate to add abilities upon creation and it now doesn't include hard-code