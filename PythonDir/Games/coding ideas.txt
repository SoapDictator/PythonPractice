main #runs the entire game
->coupled with everything
+main cycle
+management classes' initializations
+(?) game state machine #so basically it describes the turn "playback" as well as it definds "binds"

unit management class #controls the selection, adding/removing units, etc.
-> drawing management
-> map management
+create unit
+destroy unit
+move unit #stores and executes unit's movement
+(?)draw unit #get a unit type from the unit and draws its pattern
-movement queue #have a huge array for every unit on the map, needs to be carefully managed

drawing management class #so window drawing and unit drawin is separate? make the drawing heirarcy
-> unit management
-> (?) map management
-> (?)gui #probably just draw the gui here, but configure it in another class

input management class #keyboard, mouse management, command pattern is king
-> unit management
-> map management
-> gui
+manages inputs from keyboard and sends it elsewhere
+has input states

gui class #supposed to be separate from the drawing management class
-> drawing management
-> input management
-> (?) map class #it's part of GUI, selection and everything, but merging the two is a bad idea
+ties user interface to the interactions #duh

map management class #returns the infomation about particular things being in particular places
-> (?) gui
-> unit management
-> input management
-> (?) drawing management#partially and more from a gui standpoint
+tracs positions
+tracs colisions
+tracs interactions #interactions between units on the map

unit class
-> drawing pattern of a specific unit
-> unit management
-stats (health, armor, speed, damage)
-active buff/debuff
-movement queue #i will probably move it to the unit management and create one huge queue fore everyone

###

game events:
- terminate
- screenRefresh
- moveStore
- moveExecute
- moveSelection
- unitSelect
- mapGetUnit
- (?)inputSwitchState
- unitCreate
- unitDestroy
- (?)drawUnit #will be removed