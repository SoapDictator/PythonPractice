main #runs the entire game
->coupled with everything
	+main cycle
	+management classes' initializations and their interconnections

event management
-> map management
-> unit management
	+adds events such as movement, attacks, health checks, etc.
	+handles events
	+determines the action order for proper turn structure
	-event queue
	
unit management class #controls the selection, adding/removing units, etc.
-> map management
	+create unit
	+destroy unit
	+move units
	+resolve movement collisions
	-units array containing all units currently existing
	-movement queues array containing a queue for each unit
	-currently selected unit

drawing management class #so window drawing and unit drawin is separate? make the drawing heirarcy
-> unit management
-> map management
	-constants required for drawing the window and everything on it

input management class #keyboard, mouse management
-> unit management
-> map management
	+state machine for inputs
	+manages inputs from keyboard and mouse
	-input states
	-currently used input state

map management class #returns the infomation about particular things being in particular places
-> unit management
-> drawing management #partially and more from a gui standpoint
	-Vision Obstacle array
	-Movement Obstacle array
	-the entire map as an array
	-neighbours graph each node containing every single neighboring hex with the selected one

unit class
-> unit management
-> map management
	+add movement queue
	+cast ability
	-stats (health, armor, speed, damage, AC, FR, VR, abilities)
	-activated abilities #list of ability class instances that will be used during the turn
	-active buff/debuff #just a list that autoresolves in the end of the turn
	-current attack target (not all of them will have one)

###

game events:	#exclusively unit interactions
	- unitMove
	- unitAttack
	- unitCreate
	- unitDestroy
	- unitHealthCheck
	- unitAbilityCast

input states:	#some game events are able to switch those around
	-selection movement
	-unit movement
	-unit attack

GUI:
	- so the basic unit interaction gui:
		- buttons for movement and attack actions
		- buttons for ability casting
		- button for undoing all actions
		
	- add additional "lense" so it will be possible to look up other units' attack and movement ranges
	
	- add tooltips:
		- display info about units (name/faction/type/stats/abilities/effects/etc.)
		(maybe have one set of tooltips, when hovering over a unit, and an expanded version when selected)
		- display ability/effect information
		- display terrain info (type/obstacles/etc.)
		
	- draw outline on selected unit
	- draw outline on "aura" effects
	
###

TODO:
	- fix creating units by their codes (same for events)
	- write basic p2p stuff, so i can play with somebody already
	- add avalible units and rewrite the code to use coding for units instead of their names
	- store FOV calculation results in unit objects as well as player global FOV
	- add a way to store temporal arrays/values in window managers, as to not recalculate the same info every frame
	- add a function for undoing casted abilities
	- make a basic GUI for easier interactions with units (see GUI section of "ideas")
	- add a way to track mouse movement in input manager for map mouse scrolling

DONE:
	= fixed base functionality of units (I wish that was a joke)
	= fixed stat dictionaries not saving the data properly
	= added effects' classes
	= wrote a simple game event logger
	= added states for units; now unit can be "Conflicted" if it shares the same hex with another unit (can't attack/use abilities)